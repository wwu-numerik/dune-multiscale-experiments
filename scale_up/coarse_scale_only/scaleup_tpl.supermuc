from __future__ import division

from math import ceil

tpl_str='''#!/bin/bash
##
## optional: energy policy tags
#@ energy_policy_tag = NONE
# DO NOT USE environment = COPY_ALL
#@ job_type = MPICH
#@ class = {{ 'test' if nodes < 17 else 'general' }}
#@ node = {{ nodes }}
#@ island_count=1
# other example
#@ tasks_per_node = 28
#@ wall_clock_limit = 0:6:30
##                    1 h 20 min 30 secs
#@ job_name = msfem_{{ MACRO }}x{{ MICRO }}_{{ nodes }}N_1C
#@ network.MPI = sn_all,not_shared,us
#@ initialdir = $(home)/multiscale-build-phase2/dune-multiscale
#@ output = scaleup_job_msfem_{{ MACRO }}x{{ MICRO }}_{{ nodes }}N_1C_$(jobid).out
#@ error = scaleup_job_msfem_{{ MACRO }}x{{ MICRO }}_{{ nodes }}N_1C_$(jobid).err
#@ notification=always
#@ notify_user=rene.milk@wwu.de
#@ queue
. /etc/profile
. /etc/profile.d/modules.sh
#setup of environment
source $HOME/.modules
#optional: 
#module load mpi_pinning/hybrid_blocked

BIN=$HOME/multiscale-build-phase2/dune-multiscale/elliptic_msfem


OPT="/home/hpc/pr94si/di73dez/main_multiscale/experiments/scale_up/coarse_scale_only/refine_msfem_{{ procs }}.ini \
-global.datadir $HOME/multiscale-build-phase2/dune-multiscale/scaleup_n{{ procs }}_T1 "

mpirun -n {{ procs }} $BIN ${OPT}
'''

from jinja2 import Template
tpl=Template(tpl_str)

MACRO=64
MICRO=8
def output_run(i):
  procs = i
  nodes = int(ceil(procs / 12))
  #print('nodes {} - procs {}'.format(nodes, procs))
  fn = 'node_{}.submit'.format(nodes)
  open(fn, 'wt').write(tpl.render(**locals()))
  print('llsubmit {}'.format(fn))


for i in [125, 216, 343, 512, 729, 1000, 1331, 3375, 8000, 13824]:
  output_run(i)

